import {User} from "@/app/login/page";
import {BACKENDURL} from "@/app/statics";
import {VaultEntry} from "@/app/vault/vaultEntry";
import Router from 'next/router';


export async function getPasswordForUser(): Promise<VaultEntry[]> {
    const resp = await fetch(`${BACKENDURL}passwords/`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
        cache: "no-cache",
        credentials: "include",
        mode: "cors",
    })
    
    if (resp.status === 401)
        Router.push("/login")
    console.log("res")
    return resp.json()
}

export async function createNewEntry(entry: VaultEntry): Promise<VaultEntry> {
    const resp = await fetch(`${BACKENDURL}passwords/`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            title: entry.title,
            description: entry.description,
            url: entry.url,
            username: entry.username,
            password: entry.password,
            category: entry.category
        }),
        cache: "no-cache",
        credentials: "include",
        mode: "cors",
    })
    
    if (resp.status === 401)
        Router.push("/login")

    return resp.json()
}

export async function deletePassword(id: string): Promise<string> {
    const resp = await fetch(`${BACKENDURL}passwords/${id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        },
        cache: "no-cache",
        credentials: "include",
        mode: "cors",
    })

    if (resp.status === 401)
        Router.push("/login")
    
    if (resp.status !== 204) {
        return "Failed to delete password"
    }

    return "Password deleted"
}

// most this code snippet was generated by chatgpt
export async function editEntryAPI(id: string, entry: VaultEntry): Promise<VaultEntry> {
    // Stelle sicher, dass die ID korrekt in die URL integriert wird
    const url = `${BACKENDURL}passwords/${id}`;

    console.log("Attempting to update entry at URL:", url); // Zum Debuggen der URL

    try {
        const resp = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(entry),
            credentials: "include",
            mode: "cors",
        });

        if (resp.status === 403 || resp.status === 401) {
            Router.push("/login");
            throw new Error('Unauthorized or Forbidden access - redirected to login');
        }

        if (!resp.ok) {
            const errorText = await resp.text(); // FÃ¼r detaillierte Fehlermeldungen
            throw new Error(`Failed to update the password entry: ${errorText}`);
        }

        return await resp.json();
    } catch (error) {
        console.error("Error in editEntryAPI:", error);
        throw error;
    }
}

